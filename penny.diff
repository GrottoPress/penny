diff --git a/config/charms.cr b/config/charms.cr
index 107f6bc..f96930f 100644
--- a/config/charms.cr
+++ b/config/charms.cr
@@ -1,13 +1,13 @@
 module Lucky::SelectHelpers
   def options_for_multi_select(
-    field : Avram::Attribute(Array(T) | Nil),
+    field : Avram::Attribute(Array(T)),
     select_options : Array(Tuple(String, T)),
     **html_options
   ) : Nil forall T
     select_options.each do |option_name, option_value|
       attributes = {"value" => option_value.to_s}
 
-      is_selected = field.value && attributes["value"].in?(field.value!)
+      is_selected = field.value && attributes["value"].in?(field.value.not_nil!)
       attributes["selected"] = "selected" if is_selected
 
       option option_name, merge_options(html_options, attributes)
diff --git a/db/migrations/20210208231305_make_email_columns_case_insensitive.cr b/db/migrations/20210208231305_make_email_columns_case_insensitive.cr
index a5bd0d6..7159301 100644
--- a/db/migrations/20210208231305_make_email_columns_case_insensitive.cr
+++ b/db/migrations/20210208231305_make_email_columns_case_insensitive.cr
@@ -12,6 +12,8 @@ class MakeEmailColumnsCaseInsensitive::V20210208231305 < Avram::Migrator::Migrat
   end
 
   def rollback
+    disable_extension "citext"
+
     alter :users do
       change_type email : String, case_sensitive: true
     end
diff --git a/db/migrations/20210816202438_add_settings_to_users.cr b/db/migrations/20210816202438_add_settings_to_users.cr
new file mode 100644
index 0000000..197ed5f
--- /dev/null
+++ b/db/migrations/20210816202438_add_settings_to_users.cr
@@ -0,0 +1,28 @@
+# # IMPORTANT!: Use this only if you intend to switch from `UserOptions`
+# # to `UserSettings`.
+# #
+# # Temporarily remove:
+# #
+# #   `skip_file if Avram::Model.all_subclasses
+# #     .map(&.stringify)
+# #     .includes?("UserOptions")`
+# #
+# #   from `lib/shield/src/presets/user_settings.cr`, for this
+# #   migration to compile.
+# class AddSettingsToUsers::V20210815163059 < Avram::Migrator::Migration::V1
+#   def migrate
+#     alter :users do
+#       add settings : JSON::Any, fill_existing_with: JSON.parse({
+#         password_notify: true,
+#         bearer_login_notify: true,
+#         login_notify: true
+#       }.to_json)
+#     end
+#   end
+
+#   def rollback
+#     alter :users do
+#       remove :settings
+#     end
+#   end
+# end
diff --git a/db/migrations/20210824122409_copy_user_options_to_users_settings.cr b/db/migrations/20210824122409_copy_user_options_to_users_settings.cr
new file mode 100644
index 0000000..5319c14
--- /dev/null
+++ b/db/migrations/20210824122409_copy_user_options_to_users_settings.cr
@@ -0,0 +1,41 @@
+# # IMPORTANT!: Use this only if you intend to switch from `UserOptions`
+# # to `UserSettings`.
+# #
+# # Temporarily remove:
+# #
+# #   `skip_file if Avram::Model.all_subclasses
+# #     .map(&.stringify)
+# #     .includes?("UserOptions")`
+# #
+# #   from `lib/shield/src/presets/user_settings.cr`, for this
+# #   migration to compile.
+# class CopyUserOptionsToUsersSettings::V20210824122409 < Avram::Migrator::Migration::V1
+#   def migrate
+#     AppDatabase.transaction do
+#       UserOptionsQuery.new.preload_user.each do |options|
+#         UpdateUser.update!(
+#           options.user,
+#           current_login: nil,
+#           bearer_login_notify: options.bearer_login_notify,
+#           login_notify: options.login_notify,
+#           password_notify: options.password_notify,
+#           # IMPORTANT!: Include any custom columns you've added...
+#         )
+#       end
+#     end
+#   end
+
+#   def rollback
+#     AppDatabase.transaction do
+#       UserQuery.new.each do |user|
+#         SaveUserOptions.upsert!(
+#           user_id: user.id,
+#           bearer_login_notify: user.settings.bearer_login_notify,
+#           login_notify: user.settings.login_notify,
+#           password_notify: user.settings.password_notify,
+#           # IMPORTANT!: Include any custom properties you've added...
+#         )
+#       end
+#     end
+#   end
+# end
diff --git a/db/migrations/20210824122912_remove_user_options.cr b/db/migrations/20210824122912_remove_user_options.cr
new file mode 100644
index 0000000..465eeec
--- /dev/null
+++ b/db/migrations/20210824122912_remove_user_options.cr
@@ -0,0 +1,32 @@
+# # IMPORTANT!: Use this only if you intend to switch from `UserOptions`
+# # to `UserSettings`.
+# #
+# # Run this migration only after you are sure your options were successfully
+# # ported over in the previous migration.
+# #
+# # Temporarily remove:
+# #
+# #   `skip_file if Avram::Model.all_subclasses
+# #     .map(&.stringify)
+# #     .includes?("UserOptions")`
+# #
+# #   from `lib/shield/src/presets/user_settings.cr`, for this
+# #   migration to compile.
+# class RemoveUserOptions::V20210824122912 < Avram::Migrator::Migration::V1
+#   def migrate
+#     drop :user_options
+#   end
+
+#   def rollback
+#     create :user_options do
+#       primary_key id : Int64
+
+#       add_timestamps
+#       add_belongs_to user : User, on_delete: :cascade, unique: true
+
+#       add bearer_login_notify : Bool
+#       add login_notify : Bool
+#       add password_notify : Bool
+#     end
+#   end
+# end
diff --git a/shard.yml b/shard.yml
index 228bf45..69bdc03 100644
--- a/shard.yml
+++ b/shard.yml
@@ -18,7 +18,7 @@ dependencies:
   #   version: ~> 0.5.0
   lucky:
     github: luckyframework/lucky
-    version: ~> 0.27.0
+    version: ~> 0.28.0
   carbon:
     github: luckyframework/carbon
     version: ~> 0.2.0
@@ -30,7 +30,7 @@ dependencies:
     version: ~> 0.3.0
   shield:
     github: GrottoPress/shield
-    version: ~> 0.10.0
+    version: ~> 0.11.0
 
 development_dependencies:
   # ameba:
diff --git a/src/actions/current_login/new.cr b/src/actions/current_login/new.cr
index d6fd0e0..1616545 100644
--- a/src/actions/current_login/new.cr
+++ b/src/actions/current_login/new.cr
@@ -2,7 +2,7 @@ class CurrentLogin::New < BrowserAction
   include Shield::CurrentLogin::New
 
   get "/login" do
-    operation = LogUserIn.new(remote_ip: remote_ip, session: session)
+    operation = LogUserIn.new(remote_ip: remote_ip?, session: session)
     html NewPage, operation: operation
   end
 end
diff --git a/src/actions/current_user/edit.cr b/src/actions/current_user/edit.cr
index 3b5927b..4974b33 100644
--- a/src/actions/current_user/edit.cr
+++ b/src/actions/current_user/edit.cr
@@ -4,8 +4,8 @@ class CurrentUser::Edit < BrowserAction
   get "/account/edit" do
     operation = UpdateCurrentUser.new(
       user,
-      remote_ip: remote_ip,
-      current_login: current_login
+      remote_ip: remote_ip?,
+      current_login: current_login?
     )
 
     html EditPage, operation: operation
diff --git a/src/actions/email_confirmations/new.cr b/src/actions/email_confirmations/new.cr
index 0eee15d..16f3eb3 100644
--- a/src/actions/email_confirmations/new.cr
+++ b/src/actions/email_confirmations/new.cr
@@ -2,7 +2,7 @@ class EmailConfirmations::New < BrowserAction
   include Shield::EmailConfirmations::New
 
   get "/email-confirmations/new" do
-    operation = StartEmailConfirmation.new(remote_ip: remote_ip)
+    operation = StartEmailConfirmation.new(remote_ip: remote_ip?)
     html NewPage, operation: operation
   end
 end
diff --git a/src/actions/home/index.cr b/src/actions/home/index.cr
index 23a07e2..5feb136 100644
--- a/src/actions/home/index.cr
+++ b/src/actions/home/index.cr
@@ -7,6 +7,6 @@ class Home::Index < BrowserAction
   end
 
   def authorize?(user : User) : Bool
-    user.id == current_user.try &.id
+    user.id == current_user?.try &.id
   end
 end
diff --git a/src/actions/password_resets/new.cr b/src/actions/password_resets/new.cr
index d082654..9997a80 100644
--- a/src/actions/password_resets/new.cr
+++ b/src/actions/password_resets/new.cr
@@ -2,7 +2,7 @@ class PasswordResets::New < BrowserAction
   include Shield::PasswordResets::New
 
   get "/password-resets/new" do
-    operation = StartPasswordReset.new(remote_ip: remote_ip)
+    operation = StartPasswordReset.new(remote_ip: remote_ip?)
     html NewPage, operation: operation
   end
 end
diff --git a/src/actions/users/edit.cr b/src/actions/users/edit.cr
index c297151..6158513 100644
--- a/src/actions/users/edit.cr
+++ b/src/actions/users/edit.cr
@@ -2,7 +2,7 @@ class Users::Edit < BrowserAction
   include Shield::Users::Edit
 
   get "/users/:user_id/edit" do
-    operation = UpdateUser.new(user, current_login: current_login)
+    operation = UpdateUser.new(user, current_login: current_login?)
     html EditPage, operation: operation
   end
 end
diff --git a/src/app_server.cr b/src/app_server.cr
index 43f877b..d32d5bf 100644
--- a/src/app_server.cr
+++ b/src/app_server.cr
@@ -7,7 +7,6 @@ class AppServer < Lucky::BaseAppServer
       Lucky::HttpMethodOverrideHandler.new,
       Lucky::LogHandler.new,
       Lucky::ErrorHandler.new(action: Errors::Show),
-      Lucky::RemoteIpHandler.new,
       UnslashPathHandler.new,
       Lucky::RouteHandler.new,
       Lucky::StaticCompressionHandler.new(
diff --git a/src/components/shared/field.cr b/src/components/shared/field.cr
index 07aea8f..a877fbe 100644
--- a/src/components/shared/field.cr
+++ b/src/components/shared/field.cr
@@ -47,7 +47,7 @@ class Shared::Field(T) < BaseComponent
       yield input_builder
     end
 
-    mount Shared::FieldErrors, attribute
+    mount Shared::FieldErrors(T), attribute
   end
 
   # Use a text_input by default
diff --git a/src/components/shared/layout_head.cr b/src/components/shared/layout_head.cr
index 702f9ac..b150369 100644
--- a/src/components/shared/layout_head.cr
+++ b/src/components/shared/layout_head.cr
@@ -1,7 +1,5 @@
 class Shared::LayoutHead < BaseComponent
   needs page_title : String
-  # This is used by the 'csrf_meta_tags' method
-  needs context : HTTP::Server::Context
 
   def render
     head do
diff --git a/src/models/base_model.cr b/src/models/base_model.cr
index 6bafeb8..522a89d 100644
--- a/src/models/base_model.cr
+++ b/src/models/base_model.cr
@@ -1,4 +1,6 @@
 abstract class BaseModel < Avram::Model
+  include Shield::Model
+
   def self.database : Avram::Database.class
     AppDatabase
   end
diff --git a/src/models/user.cr b/src/models/user.cr
index 8d5c564..441a5a6 100644
--- a/src/models/user.cr
+++ b/src/models/user.cr
@@ -1,5 +1,13 @@
 class User < BaseModel
   include Shield::User
+  # include Shield::UserSettingsColumn
+
+  include Shield::HasOneUserOptions
+  include Shield::HasManyBearerLogins
+  include Shield::HasManyEmailConfirmations
+  include Shield::HasManyLogins
+  include Shield::HasManyPasswordResets
+
   include Carbon::Emailable
 
   __enum Level do
diff --git a/src/models/user_settings.cr b/src/models/user_settings.cr
new file mode 100644
index 0000000..e580ec6
--- /dev/null
+++ b/src/models/user_settings.cr
@@ -0,0 +1,5 @@
+# class UserSettings
+#   include Shield::UserSettings
+#   include Shield::BearerLoginUserSettings
+#   include Shield::LoginUserSettings
+# end
diff --git a/src/operations/save_user_options.cr b/src/operations/save_user_options.cr
new file mode 100644
index 0000000..05cd94d
--- /dev/null
+++ b/src/operations/save_user_options.cr
@@ -0,0 +1,3 @@
+# class SaveUserOptions < UserOptions::SaveOperation
+#   upsert_lookup_columns :user_id
+# end
diff --git a/src/pages/auth_layout.cr b/src/pages/auth_layout.cr
index 322da6a..a9dfb5f 100644
--- a/src/pages/auth_layout.cr
+++ b/src/pages/auth_layout.cr
@@ -13,7 +13,7 @@ abstract class AuthLayout
     html_doctype
 
     html lang: "en" do
-      mount Shared::LayoutHead, page_title: page_title, context: context
+      mount Shared::LayoutHead, page_title: page_title
 
       body do
         mount Shared::FlashMessages, flash: context.flash
diff --git a/src/pages/bearer_logins/new_page.cr b/src/pages/bearer_logins/new_page.cr
index fccbf02..2833dd7 100644
--- a/src/pages/bearer_logins/new_page.cr
+++ b/src/pages/bearer_logins/new_page.cr
@@ -19,7 +19,7 @@ class BearerLogins::NewPage < MainLayout
         label "Scopes", for: "#{param_key}_scopes"
 
         select_tag id: "#{param_key}_scopes",
-          name: "#{param_key}:scopes",
+          name: "#{param_key}:scopes[]",
           attrs: [:multiple] do
             options_for_multi_select operation.scopes, options_for_scopes
         end
@@ -27,6 +27,14 @@ class BearerLogins::NewPage < MainLayout
         mount Shared::FieldErrors, operation.scopes
       end
 
+      # para do
+      #   mount Shared::Field, operation.scopes do |builder|
+      #     builder.multi_select_input do
+      #       builder.options_for_select(select_options: options_for_scopes)
+      #     end
+      #   end
+      # end
+
       para do
         button "Add bearer login", role: "submit"
       end
diff --git a/src/pages/main_layout.cr b/src/pages/main_layout.cr
index ffe44f1..a3f69ee 100644
--- a/src/pages/main_layout.cr
+++ b/src/pages/main_layout.cr
@@ -13,7 +13,7 @@ abstract class MainLayout
     html_doctype
 
     html lang: "en" do
-      mount Shared::LayoutHead, page_title: page_title, context: context
+      mount Shared::LayoutHead, page_title: page_title
 
       body do
         mount Menus::Primary
diff --git a/src/pages/users/edit_page.cr b/src/pages/users/edit_page.cr
index 2431ae0..a214ca5 100644
--- a/src/pages/users/edit_page.cr
+++ b/src/pages/users/edit_page.cr
@@ -8,7 +8,7 @@ class Users::EditPage < MainLayout
   def content
     h1 "Edit User"
 
-    form_for Update.with(user_id: operation.id.value!) do
+    form_for Update.with(user_id: operation.id.value.not_nil!) do
       para do
         mount Shared::Field, operation.email
       end
